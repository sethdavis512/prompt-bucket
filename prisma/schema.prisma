// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth related fields
  emailVerified Boolean @default(false)
  image         String?

  // Subscription fields
  subscriptionStatus String? @default("free") // free, active, canceled, etc.
  subscriptionId     String?
  customerId         String?

  // Relations
  prompts    Prompt[]
  categories Category[]
  chains     Chain[]
  sessions   Session[]
  accounts   Account[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  @default("#6366f1") // Default indigo color
  userId      String   // Always required - categories are always user-owned
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts PromptCategory[]

  // Ensure unique category names per user
  @@unique([name, userId])
  @@map("categories")
}

model Prompt {
  id          String   @id @default(cuid())
  title       String
  description String?
  public      Boolean  @default(false) // Public/private sharing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Prompt structure sections
  taskContext             String?
  toneContext             String?
  backgroundData          String?
  detailedTaskDescription String?
  examples                String?
  conversationHistory     String?
  immediateTask           String?
  thinkingSteps           String?
  outputFormatting        String?
  prefilledResponse       String?

  // Individual field scores (1-10 each)
  taskContextScore        Int? @default(0)
  toneContextScore        Int? @default(0)
  backgroundDataScore     Int? @default(0)
  detailedTaskScore       Int? @default(0)
  examplesScore          Int? @default(0)
  conversationScore      Int? @default(0)
  immediateTaskScore     Int? @default(0)
  thinkingStepsScore     Int? @default(0)
  outputFormattingScore  Int? @default(0)
  prefilledResponseScore Int? @default(0)

  // Overall calculated score (sum of above, max 100)
  totalScore             Int? @default(0)

  // Relations
  categories PromptCategory[]
  chainPrompts ChainPrompt[]

  @@map("prompts")
}

model PromptCategory {
  id         String   @id @default(cuid())
  promptId   String
  categoryId String
  createdAt  DateTime @default(now())

  prompt   Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([promptId, categoryId])
  @@map("prompt_categories")
}

model Chain {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Overall chain score from AI evaluation
  chainScore Int? @default(0)
  
  // AI evaluation feedback
  evaluationFeedback String?
  lastEvaluatedAt    DateTime?

  // Relations
  prompts ChainPrompt[]

  @@map("chains")
}

model ChainPrompt {
  id       String @id @default(cuid())
  chainId  String
  promptId String
  order    Int    // Position in the chain (0-based)
  createdAt DateTime @default(now())

  chain  Chain  @relation(fields: [chainId], references: [id], onDelete: Cascade)
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  // Ensure unique ordering per chain and no duplicate prompts in same chain
  @@unique([chainId, order])
  @@unique([chainId, promptId])
  @@map("chain_prompts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
